// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow_serving/apis/session_service.proto

package tensorflow_serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protobuf "github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionRunRequest struct {
	// Model Specification. If version is not specified, will use the latest
	// (numerical) version.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec,proto3" json:"model_spec,omitempty"`
	// Tensors to be fed in the step. Each feed is a named tensor.
	Feed []*protobuf.NamedTensorProto `protobuf:"bytes,2,rep,name=feed,proto3" json:"feed,omitempty"`
	// Fetches. A list of tensor names. The caller expects a tensor to
	// be returned for each fetch[i] (see RunResponse.tensor). The
	// order of specified fetches does not change the execution order.
	Fetch []string `protobuf:"bytes,3,rep,name=fetch,proto3" json:"fetch,omitempty"`
	// Target Nodes. A list of node names. The named nodes will be run
	// to but their outputs will not be fetched.
	Target []string `protobuf:"bytes,4,rep,name=target,proto3" json:"target,omitempty"`
	// Options for the run call. **Currently ignored.**
	Options              *protobuf.RunOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SessionRunRequest) Reset()         { *m = SessionRunRequest{} }
func (m *SessionRunRequest) String() string { return proto.CompactTextString(m) }
func (*SessionRunRequest) ProtoMessage()    {}
func (*SessionRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_service_6b44a6d74339709d, []int{0}
}
func (m *SessionRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionRunRequest.Unmarshal(m, b)
}
func (m *SessionRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionRunRequest.Marshal(b, m, deterministic)
}
func (dst *SessionRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRunRequest.Merge(dst, src)
}
func (m *SessionRunRequest) XXX_Size() int {
	return xxx_messageInfo_SessionRunRequest.Size(m)
}
func (m *SessionRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRunRequest proto.InternalMessageInfo

func (m *SessionRunRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *SessionRunRequest) GetFeed() []*protobuf.NamedTensorProto {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *SessionRunRequest) GetFetch() []string {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *SessionRunRequest) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SessionRunRequest) GetOptions() *protobuf.RunOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type SessionRunResponse struct {
	// NOTE: The order of the returned tensors may or may not match
	// the fetch order specified in RunRequest.
	Tensor []*protobuf.NamedTensorProto `protobuf:"bytes,1,rep,name=tensor,proto3" json:"tensor,omitempty"`
	// Returned metadata if requested in the options.
	Metadata             *protobuf.RunMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SessionRunResponse) Reset()         { *m = SessionRunResponse{} }
func (m *SessionRunResponse) String() string { return proto.CompactTextString(m) }
func (*SessionRunResponse) ProtoMessage()    {}
func (*SessionRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_service_6b44a6d74339709d, []int{1}
}
func (m *SessionRunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionRunResponse.Unmarshal(m, b)
}
func (m *SessionRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionRunResponse.Marshal(b, m, deterministic)
}
func (dst *SessionRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRunResponse.Merge(dst, src)
}
func (m *SessionRunResponse) XXX_Size() int {
	return xxx_messageInfo_SessionRunResponse.Size(m)
}
func (m *SessionRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRunResponse proto.InternalMessageInfo

func (m *SessionRunResponse) GetTensor() []*protobuf.NamedTensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SessionRunResponse) GetMetadata() *protobuf.RunMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionRunRequest)(nil), "tensorflow.serving.SessionRunRequest")
	proto.RegisterType((*SessionRunResponse)(nil), "tensorflow.serving.SessionRunResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionServiceClient interface {
	// Runs inference of a given model.
	SessionRun(ctx context.Context, in *SessionRunRequest, opts ...grpc.CallOption) (*SessionRunResponse, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) SessionRun(ctx context.Context, in *SessionRunRequest, opts ...grpc.CallOption) (*SessionRunResponse, error) {
	out := new(SessionRunResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.serving.SessionService/SessionRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
type SessionServiceServer interface {
	// Runs inference of a given model.
	SessionRun(context.Context, *SessionRunRequest) (*SessionRunResponse, error)
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_SessionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).SessionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.serving.SessionService/SessionRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).SessionRun(ctx, req.(*SessionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.serving.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionRun",
			Handler:    _SessionService_SessionRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow_serving/apis/session_service.proto",
}

func init() {
	proto.RegisterFile("tensorflow_serving/apis/session_service.proto", fileDescriptor_session_service_6b44a6d74339709d)
}

var fileDescriptor_session_service_6b44a6d74339709d = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x86, 0x53, 0x0a, 0x7c, 0x1f, 0x43, 0x62, 0xe2, 0xc4, 0xe0, 0x86, 0x68, 0x42, 0x30, 0x18,
	0x12, 0x63, 0x4b, 0xc0, 0xa3, 0x27, 0xef, 0xa8, 0x59, 0xbc, 0x79, 0x20, 0xa5, 0x9d, 0x62, 0x13,
	0xba, 0x5b, 0xbb, 0x5b, 0x3d, 0xfa, 0x63, 0xfd, 0x13, 0x1e, 0x0d, 0xbb, 0x45, 0x1a, 0x91, 0xe8,
	0x6d, 0x67, 0xe6, 0x99, 0x7d, 0xdf, 0xd9, 0x59, 0xb8, 0xd4, 0x24, 0x94, 0xcc, 0xe3, 0x95, 0x7c,
	0x9d, 0x2b, 0xca, 0x5f, 0x12, 0xb1, 0xf4, 0x83, 0x2c, 0x51, 0xbe, 0x22, 0xa5, 0x12, 0x29, 0x6c,
	0x32, 0x24, 0x2f, 0xcb, 0xa5, 0x96, 0x88, 0x5b, 0xdc, 0x2b, 0xf1, 0xee, 0xd9, 0xbe, 0x2b, 0x52,
	0x19, 0xd1, 0xca, 0x36, 0x76, 0x07, 0x5b, 0xc8, 0x0f, 0x65, 0x4e, 0xbe, 0x49, 0x2f, 0x8a, 0xd8,
	0x0f, 0xa5, 0x88, 0x93, 0x65, 0x89, 0x5d, 0xec, 0xc5, 0x44, 0x90, 0x52, 0x34, 0xb7, 0x65, 0x0b,
	0xf7, 0xdf, 0x1d, 0x38, 0x9c, 0x59, 0x9b, 0xbc, 0x10, 0x9c, 0x9e, 0x0b, 0x52, 0x1a, 0xaf, 0x01,
	0x8c, 0xf0, 0x5c, 0x65, 0x14, 0x32, 0xa7, 0xe7, 0x0c, 0xdb, 0xe3, 0x53, 0x6f, 0xd7, 0xb7, 0x37,
	0x5d, 0x53, 0xb3, 0x8c, 0x42, 0xde, 0x4a, 0x37, 0x47, 0x1c, 0x41, 0x3d, 0x26, 0x8a, 0x58, 0xad,
	0xe7, 0x0e, 0xdb, 0xe3, 0x93, 0x6a, 0xdf, 0xed, 0xda, 0xc1, 0x83, 0x89, 0xef, 0xd7, 0xfa, 0xdc,
	0x90, 0x78, 0x04, 0x8d, 0x98, 0x74, 0xf8, 0xc4, 0xdc, 0x9e, 0x3b, 0x6c, 0x71, 0x1b, 0x60, 0x07,
	0x9a, 0x3a, 0xc8, 0x97, 0xa4, 0x59, 0xdd, 0xa4, 0xcb, 0x08, 0x47, 0xf0, 0x4f, 0x66, 0x3a, 0x91,
	0x42, 0xb1, 0x86, 0xb1, 0xd6, 0xa9, 0x4a, 0xf0, 0x42, 0xdc, 0xd9, 0x2a, 0xdf, 0x60, 0xfd, 0x37,
	0xc0, 0xea, 0x90, 0x2a, 0x93, 0x42, 0x11, 0x5e, 0x41, 0xd3, 0xf6, 0x31, 0xe7, 0x0f, 0x4e, 0x4b,
	0x16, 0x27, 0xf0, 0x3f, 0x25, 0x1d, 0x44, 0x81, 0x0e, 0x58, 0xcd, 0xc8, 0x1f, 0x7f, 0x93, 0x9f,
	0x96, 0x65, 0xfe, 0x05, 0x8e, 0x53, 0x38, 0x28, 0x0d, 0xcc, 0xec, 0x5f, 0xc0, 0x47, 0x80, 0xad,
	0x25, 0x1c, 0xfc, 0xf4, 0xb8, 0x3b, 0x7b, 0xe9, 0x9e, 0xff, 0x86, 0xd9, 0xc9, 0x6e, 0xdc, 0x0f,
	0xc7, 0x59, 0x34, 0xcd, 0x86, 0x27, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0x16, 0xb9, 0xa1,
	0x9f, 0x02, 0x00, 0x00,
}
